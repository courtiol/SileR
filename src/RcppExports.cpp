// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// vpowC
Rcpp::NumericVector vpowC(Rcpp::NumericVector vec1, Rcpp::NumericVector vec2);
RcppExport SEXP _SileR_vpowC(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(vpowC(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// unboundC
Rcpp::NumericVector unboundC(Rcpp::NumericVector x);
RcppExport SEXP _SileR_unboundC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unboundC(x));
    return rcpp_result_gen;
END_RCPP
}
// predictorC
Rcpp::NumericVector predictorC(Rcpp::NumericVector w1, Rcpp::NumericVector b1, Rcpp::NumericVector w2, Rcpp::NumericVector b2, Rcpp::NumericVector w3, Rcpp::NumericVector w4, Rcpp::NumericVector w5, Rcpp::NumericVector b4, Rcpp::NumericVector b5, Rcpp::NumericVector age, Rcpp::NumericVector timecap, Rcpp::NumericVector indices_captured);
RcppExport SEXP _SileR_predictorC(SEXP w1SEXP, SEXP b1SEXP, SEXP w2SEXP, SEXP b2SEXP, SEXP w3SEXP, SEXP w4SEXP, SEXP w5SEXP, SEXP b4SEXP, SEXP b5SEXP, SEXP ageSEXP, SEXP timecapSEXP, SEXP indices_capturedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w3(w3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w4(w4SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w5(w5SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b5(b5SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type timecap(timecapSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type indices_captured(indices_capturedSEXP);
    rcpp_result_gen = Rcpp::wrap(predictorC(w1, b1, w2, b2, w3, w4, w5, b4, b5, age, timecap, indices_captured));
    return rcpp_result_gen;
END_RCPP
}
// compute_logLikC
double compute_logLikC(Rcpp::NumericVector pred_prob, Rcpp::NumericVector surv_bin, int scale);
RcppExport SEXP _SileR_compute_logLikC(SEXP pred_probSEXP, SEXP surv_binSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pred_prob(pred_probSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type surv_bin(surv_binSEXP);
    Rcpp::traits::input_parameter< int >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_logLikC(pred_prob, surv_bin, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SileR_vpowC", (DL_FUNC) &_SileR_vpowC, 2},
    {"_SileR_unboundC", (DL_FUNC) &_SileR_unboundC, 1},
    {"_SileR_predictorC", (DL_FUNC) &_SileR_predictorC, 12},
    {"_SileR_compute_logLikC", (DL_FUNC) &_SileR_compute_logLikC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SileR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
